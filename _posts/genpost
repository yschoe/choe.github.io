#!/usr/bin/perl

# genpost
# 
# Yoonsuck Choe
# 
# A quick and dirty hack to generate Jekyll blog posts.
#
# usage: ./genpost "Article title"
# 
#  - The main blog article text taken from STDIN, which should include 
#    DATE : "January, 1, 1970" or "1970/01/01" format
#	    This can appear at any point in the input, but must appear at least once.
#           If there are multiple occurrences, the last date will be used.
#    TEXT : Any kind of text. Adds extra "\n" after each line.
#    URL  : Any well formed URL will be turned into a link in the markdown language
# 
#    Example:
#         Januaru 1, 1970
#         Test post
#         http://yschoe.github.io
#  - output
#         Creates a new file in this format: 1970-01-01-Article-title.markdown


use List::MoreUtils 'first_index'; 

$title=$ARGV[0];
$arxiv=$ARGV[1];

@months = ("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Oct","Nov","Dec");

use Time::Piece;

my $t = Time::Piece->new();
$sys_year = $t->year;

# content: fetch from arxiv
$content="";

while (<STDIN>) {
  if (/\_\_DATE\_\_(([0-9]+)\/([0-9][0-9])\/([0-9][0-9]))\_\_ARXIV\_\_TITLE(.+)/) {
    print "\n\n\n*** ARXIV ***\n\n\n";
    $fulldate = $1;
    $year=$2;
    $month_num=$3;
    $day=$4;
    $title=$5;
  } elsif (/^(([0-9]+)\/([0-9][0-9])\/([0-9][0-9]))/) {
    $fulldate = $1;
    $year=$2;
    $month_num=$3;
    $day=$4;
  } elsif (/((Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Oct|Nov|Dec)[a-z]*\ ([0-9]+),\ ([0-9]+))/) {
    $fulldate = $1;
    $month=$2;
    $day = $3;
    $year = $4;
    $month_num = first_index { /$month/ } @months;
    $month_num ++;
  } elsif (/((Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Oct|Nov|Dec)[a-z]*\ ([0-9]+))/) {
    $fulldate = $1;
    $month=$2;
    $day = $3;
    $year = $sys_year;
    $month_num = first_index { /$month/ } @months;
    $month_num ++;
    $fulldate = $fulldate.", $year";
  } elsif (/(http.*\.\.\.)/) {
    print "\n\n\n****** Skipping $1\n\n\n";
    $content = "$content\n\n\n";
  } else {
    $str = $_;
    $str =~ s/\n/\n\n/g;
    $str =~ s/\xEF\xBF\xBC/\n\n\n/;
    $str =~ s/\?fbclid.+//;
    $str =~ s/(http[^\s]+)/\[$1\]\($1\)/g;
    $str =~ s/(\.COM)/$1\n\n\n/;
    if ($str =~ /shared\ a\ /) {
      $str = "\#\#\# quote \n\n$str\n";
    }

    # hack to give due attribution when scraping facebook posts
    if ($str =~ /^\s*Vincent\ Boucher\s*$/) {
      $str = "\#\#\# quote \n\n$str\n";
    }

    $content = "$content$str";
  }
}

if (length($fulldate)<1) {
  print "\n\n\n **** Date string error: [$fulldate]. Aborting\n";
  exit;
}

$month_num =~ s/^0//;
if ($month_num<10) {
  $month_num = "0$month_num";
}

$day =~ s/^0//;
if ($day<10) {
  $day= "0$day";
}

$strip_title=$title;
$strip_title=~s/[^a-zA-Z]/-/g;

print "\n\n***$fulldate\n";
$filename = "$year-$month_num-$day-$strip_title.markdown";

if (-f $filename) {
  print "\n\n\n **** $filename exists. Aborting. \n";
  #open(FP,"> $filename");
  exit;
} else {
  open(FP,"> $filename");
}

print FP <<EOF;
---
layout: post
title:  "$title"
date:   $fulldate
categ:  none
---

$content 

EOF

close(FP);

print $content;
